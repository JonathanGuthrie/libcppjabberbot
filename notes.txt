This is intended to be a C++ jabber client library.  I tried to base my 
affirmations bot on a jabber client class called "JabberSession", but I
think it's too low a level to really work for me.  What I think I want is
for the jabber client library to define classes for everything that the client
knows how to deal with.  Said classes includes space for all the different
kinds of things that are expected in that particular type of return value.

Then, some sort of dispatcher can be called to deal with each stanza without
having to know much of anything at all about how the stanza is built up.

I suppose I should start with operations in the jabber:iq:roster and
jabber:iq.auth namespaces.

So, how should it work?  Well, I think the best approach would be for the
client library to create an appropriate message object and then invoke a
handler, passing it a pointer to that object.  That handler would be set up
to expect a pointer to some stanza base class and registered to handle
messages for one or more namespace types.

=========================================
These are the namespaces in a query tag inside an iq message:
jabber:iq:agent (superseded by browse)
jabber:iq:agents (superseded by browse)
jabber:iq:auth (how does XMPP change this?)
jabber:iq:autoupdate
jabber:iq:browse
jabber:iq:conference
jabber:iq:gateway
jabber:iq:last
jabber:iq:oob
jabber:iq:private
jabber:iq:register
jabber:iq:roster
jabber:iq:search
jabber:iq:time
jabber:iq:version

These are namespaces that can appear in x tags inside various message types:
jabber:x:autoupdate
jabber:x:conference
jabber:x:delay
jabber:x:encrypted
jabber:x:envelope
jabber:x:event
jabber:x:expire
jabber:x:oob
jabber:x:roster
jabber:x:signed

Other namespaces:
vcard-temp (vCard tag in iq message)
http://www.w3.org/1999/xhtml (html tag in message message)
